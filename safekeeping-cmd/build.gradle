/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.5.1/userguide/tutorial_java_projects.html
 */

 
plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building a CLI application.
    id 'application'
    
    //https://github.com/kkdad/Gradle-License-Report
    id 'com.github.kkdad.dependency-license-report' version '1.16.6'
    
    //https://github.com/xvik/gradle-java-lib-plugin
    id 'ru.vyarus.java-lib' version '2.1.0'    
      
    //https://github.com/i-net-software/SetupBuilder
    id "de.inetsoftware.setupbuilder" version "4.8.7"
}

 
 
repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
     flatDir { 
       dirs '../lib/vsphere-sdk'
    }
}

dependencies {
    // This dependency is used by the application.
    implementation 'com.google.guava:guava:29.0-jre'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.13'
 

    // https://mvnrepository.com/artifact/org.jline/jline
    implementation  'org.jline:jline:3.+'

    // https://mvnrepository.com/artifact/net.java.dev.jna/jna
    implementation  'net.java.dev.jna:jna:5.3.+'

    // https://mvnrepository.com/artifact/org.fusesource.jansi/jansi
    implementation 'org.fusesource.jansi:jansi:2.0.+'
 

    implementation project(':safekeeping-core-ext') 
    implementation project(':jopt-simple') 
    
}

application {
    // Define the main class for the application.
    mainClass.set('com.vmware.safekeeping.cmd.App')
    applicationDefaultJvmArgs = ['-Xms7G','-Xmx30G','-server']
}
startScripts {
  doLast{
           windowsScript.text = windowsScript.text.replace('@rem Add default JVM options here.',
           '@rem Set JAVA_HOME to the local JRE installation\n'+
           'set JAVA_HOME="%APP_HOME%\\jre\\win"\n'+
           'set PATH=%LOCALAPPDATA%\\safekeeping\\bin;%PATH%\n\n'+
           '@rem Add default JVM options here.') 
           unixScript.text = unixScript.text.replace('# Add default JVM options here.',
           '# Set JAVA_HOME to the local JRE distribution\n'+
           'JAVA_HOME="$APP_HOME/jre/linux"\n'+           
           '# Create lib/lib64 if not exists\n'+ 
           'test ! -d "$APP_HOME/lib/lib64" &&  mkdir "$APP_HOME/lib/lib64"\n'+
           '# Set LD_LIBRARY_PATH to the local lib/lib64\n'+ 
           '\nexport LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$APP_HOME/lib/lib64\n\n'+
           '# Add default JVM options here.') 
    }
}
task copyLicense {
    outputs.file new File("$buildDir/LICENSE")
    doLast {
        copy {
            from "LICENSE"
            into "$buildDir"
        }
    }
}

applicationDistribution.from(copyLicense) {
    into ""
}

project.version = project.findProperty('projVersion') ?: '2.0.1'
 
jar {
    manifest { 
     attributes( 
            'Implementation-Title': project.name,
             'Implementation-Version': project.version,
            'Built-By'       : System.properties['user.name'],
            'Build-Timestamp': new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
            'Build-Revision' :  "",
            'Created-By'     : "Gradle ${gradle.gradleVersion}",
            'Build-Jdk'      : "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
            'Build-OS'       : "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}",
            'Main-Class'     : "com.vmware.safekeeping.cmd.App"
        )
    }
} 



setupBuilder {

    application = "Safekeeping"
    description = 'Safekeeping Insatallation. - CmdLine Version'
    icons = "test-icon.icns"

    licenseFile "LICENSE"
    

    from "${buildDir}/install/safekeeping-cmd"
     

  //  bundleJre = 1.8
    mainClass = 'com.vmware.safekeeping.cmd.App'
     mainJar = 'safekeeping-cmd-${project.version}'

    runBeforeUninstall {
        mainClass = 'com.vmware.safekeeping.cmd.App'
    }
    runAfter {
        mainClass = 'com.vmware.safekeeping.cmd.App'
      
    }
 //   service {
   //     displayName = "i-net TestLaunch Server"
     //   id = "helpdesk"
   // }
}

  
 

 msi {

    // optional, architecture to build. Defaults to x64.
    // Allows: x86, x64, ia64, x86-only
    arch = "x64"
    
    // A banner file for the installer with a typical size of 493 x 58
 //   bannerBmp = "banner.bmp"
    
    // A dialog banner file for the installer with a size of 493 x 312
//    dialogBmp = "dialog.bmp"
    
    // Set up information about the signtool
//    signTool { ... }
    
    // add a launch4j configuration to create an executable first
    // can be added multiple times
 //launch4j {
 
//}
    // optional, set a custom WXS template
 //   wxsTemplate = "my-application.wxs"
    
    // optional, list of languages to build the setup for. By default all languages will be build
    languages = [ "en-US" ]
    
    // set the minimum OS version for this installer to work on. See below
   // minOS = 10.0
    
    // optional, indicated that the application can be installed as multiple instances
    multiInstanceCount = 1
    
    // optional, a VB-Script to allow the setup of multiple instances
 //   multiInstanceScript = "multi-instance-setup.vb"
    
    // optional, set the installation scope to one of either `perUser` or `perMachine`
    installScope = "perMachine"
    
    // optional, add a VB-Script or Jscript to run before the setup GUI is displayed.
    // Note: this script does not run with elevated permissions
    // can be added multiple times.
 //   preGui "<script>"
    
    // optional, make the run after application optional. An option will be displayed to the user in the setup.
    runAfterIsOptional = false
    
    // add customized localizations to the wix builder
//    i18n { ... }
    
    // add multiple desktop starter to handle the given protocol
  //  protocolHandler { ... }

    // add extra wxs files for external fragments like custom ui elements
    // See setupBuilder.gradle under testBuilds directory for sample usage of dialog defined as external fragment.
 //   external file('fragmentDlg.wxs')
    // or
//    externals = [file('fragmentDlg_2.wxs'), file('fragmentDlg_1.wxs')]
}


rpm {

    // Sets the installation root of the software application
    // defaults to /usr/share/{setupBuilder.application}
    installationRoot = "/opt/vmware/safekeeping-cmd"
    
    // defines a file that will be stored in /etc/default/{serviceName}
    // ususally contains default information for the service starter.
   // defaultServiceFile = "default-service.txt" 
    
    // a script that will be included into the default service starter script
    //additionalServiceScript = "<script>"
    
    // true (default), if the default service (aka the first service defined)
    // should start after installation
    startDefaultService = false
    
    // The user the services will be executed with, defaults to root
    daemonUser = "root" 
    
    // Architecture of the installer, defaults to "noarch"
    architecture = "noarch"

    // List of software components the application depends on
    depends = "java"
    
    // the section is alike the category, defaults to "Application/Productivity"
    section = "Application/Productivity"
    
    // sets the homepage of the vendor for this application
    homepage = "https://www.vmware.com"
    
     // optional, true (default) to indicate that this package is compatible with its predecessor
    backwardCompatible = true

    // optional, size to expect when the package is installed.
 //   installSize = "10"

    // Licensing information for the SPEC file of this package
 //   license = ""

    // information for the SPEC file of this package
    release = "2.0.1"

    // String of summary for this package. Used in the SPEC file.
    summary = "Safekeeping backup software - CmdLine Version"
    
    // Entry string that will be used in the %prep entry of the SPEC file.
    // can be used multiple times
 //   prep = ""
    
    // Entry string that will be used in the %clean entry of the SPEC file.
    // can be used multiple times
 //   clean = ""
    
    // Entry string that will be used in the %install entry of the SPEC file.
    // can be used multiple times
//    install = ""
    
    // Entry string that will be used in the %build entry of the SPEC file.
    // can be used multiple times
 //   build = ""
    
    
}
 
 